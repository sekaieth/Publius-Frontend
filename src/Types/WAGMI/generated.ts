// Generated by @wagmi/cli@0.1.14 on 3/24/2023 at 11:02:18â€¯AM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi';
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions';

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Publius
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const publiusABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_sectionId', internalType: 'uint256', type: 'uint256' },
      { name: '_chapterName', internalType: 'string', type: 'string' },
      { name: '_chapterImage', internalType: 'string', type: 'string' },
      { name: '_chapterId', internalType: 'uint256', type: 'uint256' },
      { name: '_pageNames', internalType: 'string[]', type: 'string[]' },
      { name: '_pageContent', internalType: 'string[]', type: 'string[]' },
      { name: '_pageIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'addChapter',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_chapter', internalType: 'uint256', type: 'uint256' },
      { name: '_pageName', internalType: 'string', type: 'string' },
      { name: '_pageContent', internalType: 'string', type: 'string' },
      { name: '_pageId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addPage',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_sectionInfo', internalType: 'bytes', type: 'bytes' },
      { name: '_chapterInfo', internalType: 'bytes', type: 'bytes' },
      { name: '_pageInfo', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'addSection',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'addressToString',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'chapters',
    outputs: [
      { name: 'chapterName', internalType: 'string', type: 'string' },
      { name: 'chapterId', internalType: 'uint256', type: 'uint256' },
      { name: 'chapterImage', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_chapter', internalType: 'uint256', type: 'uint256' },
      { name: '_pageId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPage',
    outputs: [
      {
        name: '',
        internalType: 'struct Publius.Page',
        type: 'tuple',
        components: [
          { name: 'pageName', internalType: 'string', type: 'string' },
          { name: 'pageId', internalType: 'uint256', type: 'uint256' },
          { name: 'pageContent', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_chapter', internalType: 'uint256', type: 'uint256' }],
    name: 'getPageIds',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_publicationId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_publicationAuthorAddress',
        internalType: 'address',
        type: 'address',
      },
      {
        name: '_publicationAuthorName',
        internalType: 'string',
        type: 'string',
      },
      { name: '_publicationName', internalType: 'string', type: 'string' },
      {
        name: '_publicationCoverImage',
        internalType: 'string',
        type: 'string',
      },
      { name: '_costToMint', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'minterOwnedTokens',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_chapterId', internalType: 'uint256', type: 'uint256' },
      { name: '_newChapterName', internalType: 'string', type: 'string' },
      { name: '_newChapterImage', internalType: 'string', type: 'string' },
    ],
    name: 'modifyChapter',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_chapterId', internalType: 'uint256', type: 'uint256' },
      { name: '_pageId', internalType: 'uint256', type: 'uint256' },
      { name: '_newPageName', internalType: 'string', type: 'string' },
      { name: '_newPageContent', internalType: 'string', type: 'string' },
    ],
    name: 'modifyPage',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_sectionId', internalType: 'uint256', type: 'uint256' },
      { name: '_newSectionName', internalType: 'string', type: 'string' },
      { name: '_newSectionImage', internalType: 'string', type: 'string' },
    ],
    name: 'modifySection',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'publicationAuthor',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'publicationCoverImage',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'publicationId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'publicationName',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'sections',
    outputs: [
      { name: 'sectionName', internalType: 'string', type: 'string' },
      { name: 'sectionId', internalType: 'uint256', type: 'uint256' },
      { name: 'sectionImage', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenIdToMinter',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: 'uri', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PubliusFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const publiusFactoryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_publiusImpl', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_id', internalType: 'uint256', type: 'uint256' },
      {
        name: '_publicationAuthorAddress',
        internalType: 'address',
        type: 'address',
      },
      {
        name: '_publicationAuthorName',
        internalType: 'string',
        type: 'string',
      },
      { name: '_publicationName', internalType: 'string', type: 'string' },
      {
        name: '_publicationCoverImage',
        internalType: 'string',
        type: 'string',
      },
      { name: '_costToMint', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createPublication',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBeacon',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getImplementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_id', internalType: 'uint256', type: 'uint256' }],
    name: 'getPublicationAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link publiusABI}__.
 */
export function usePublius(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: publiusABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__.
 */
export function usePubliusRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof publiusABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    ...config,
  } as UseContractReadConfig<typeof publiusABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"addressToString"`.
 */
export function usePubliusAddressToString<
  TSelectData = ReadContractResult<typeof publiusABI, 'addressToString'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'addressToString', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'addressToString',
    ...config,
  } as UseContractReadConfig<
    typeof publiusABI,
    'addressToString',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"balanceOf"`.
 */
export function usePubliusBalanceOf<
  TSelectData = ReadContractResult<typeof publiusABI, 'balanceOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof publiusABI, 'balanceOf', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"chapters"`.
 */
export function usePubliusChapters<
  TSelectData = ReadContractResult<typeof publiusABI, 'chapters'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'chapters', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'chapters',
    ...config,
  } as UseContractReadConfig<typeof publiusABI, 'chapters', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"getApproved"`.
 */
export function usePubliusGetApproved<
  TSelectData = ReadContractResult<typeof publiusABI, 'getApproved'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'getApproved', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof publiusABI, 'getApproved', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"getPage"`.
 */
export function usePubliusGetPage<
  TSelectData = ReadContractResult<typeof publiusABI, 'getPage'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'getPage', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'getPage',
    ...config,
  } as UseContractReadConfig<typeof publiusABI, 'getPage', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"getPageIds"`.
 */
export function usePubliusGetPageIds<
  TSelectData = ReadContractResult<typeof publiusABI, 'getPageIds'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'getPageIds', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'getPageIds',
    ...config,
  } as UseContractReadConfig<typeof publiusABI, 'getPageIds', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function usePubliusIsApprovedForAll<
  TSelectData = ReadContractResult<typeof publiusABI, 'isApprovedForAll'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'isApprovedForAll', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof publiusABI,
    'isApprovedForAll',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"minterOwnedTokens"`.
 */
export function usePubliusMinterOwnedTokens<
  TSelectData = ReadContractResult<typeof publiusABI, 'minterOwnedTokens'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'minterOwnedTokens', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'minterOwnedTokens',
    ...config,
  } as UseContractReadConfig<
    typeof publiusABI,
    'minterOwnedTokens',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"name"`.
 */
export function usePubliusName<
  TSelectData = ReadContractResult<typeof publiusABI, 'name'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof publiusABI, 'name', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"owner"`.
 */
export function usePubliusOwner<
  TSelectData = ReadContractResult<typeof publiusABI, 'owner'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'owner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof publiusABI, 'owner', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"ownerOf"`.
 */
export function usePubliusOwnerOf<
  TSelectData = ReadContractResult<typeof publiusABI, 'ownerOf'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'ownerOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof publiusABI, 'ownerOf', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"publicationAuthor"`.
 */
export function usePubliusPublicationAuthor<
  TSelectData = ReadContractResult<typeof publiusABI, 'publicationAuthor'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'publicationAuthor', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'publicationAuthor',
    ...config,
  } as UseContractReadConfig<
    typeof publiusABI,
    'publicationAuthor',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"publicationCoverImage"`.
 */
export function usePubliusPublicationCoverImage<
  TSelectData = ReadContractResult<typeof publiusABI, 'publicationCoverImage'>
>(
  config: Omit<
    UseContractReadConfig<
      typeof publiusABI,
      'publicationCoverImage',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'publicationCoverImage',
    ...config,
  } as UseContractReadConfig<
    typeof publiusABI,
    'publicationCoverImage',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"publicationId"`.
 */
export function usePubliusPublicationId<
  TSelectData = ReadContractResult<typeof publiusABI, 'publicationId'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'publicationId', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'publicationId',
    ...config,
  } as UseContractReadConfig<typeof publiusABI, 'publicationId', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"publicationName"`.
 */
export function usePubliusPublicationName<
  TSelectData = ReadContractResult<typeof publiusABI, 'publicationName'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'publicationName', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'publicationName',
    ...config,
  } as UseContractReadConfig<
    typeof publiusABI,
    'publicationName',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"sections"`.
 */
export function usePubliusSections<
  TSelectData = ReadContractResult<typeof publiusABI, 'sections'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'sections', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'sections',
    ...config,
  } as UseContractReadConfig<typeof publiusABI, 'sections', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function usePubliusSupportsInterface<
  TSelectData = ReadContractResult<typeof publiusABI, 'supportsInterface'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'supportsInterface', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof publiusABI,
    'supportsInterface',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"symbol"`.
 */
export function usePubliusSymbol<
  TSelectData = ReadContractResult<typeof publiusABI, 'symbol'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof publiusABI, 'symbol', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function usePubliusTokenByIndex<
  TSelectData = ReadContractResult<typeof publiusABI, 'tokenByIndex'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'tokenByIndex', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof publiusABI, 'tokenByIndex', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"tokenIdToMinter"`.
 */
export function usePubliusTokenIdToMinter<
  TSelectData = ReadContractResult<typeof publiusABI, 'tokenIdToMinter'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'tokenIdToMinter', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'tokenIdToMinter',
    ...config,
  } as UseContractReadConfig<
    typeof publiusABI,
    'tokenIdToMinter',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function usePubliusTokenOfOwnerByIndex<
  TSelectData = ReadContractResult<typeof publiusABI, 'tokenOfOwnerByIndex'>
>(
  config: Omit<
    UseContractReadConfig<
      typeof publiusABI,
      'tokenOfOwnerByIndex',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'tokenOfOwnerByIndex',
    ...config,
  } as UseContractReadConfig<
    typeof publiusABI,
    'tokenOfOwnerByIndex',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"tokenURI"`.
 */
export function usePubliusTokenUri<
  TSelectData = ReadContractResult<typeof publiusABI, 'tokenURI'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'tokenURI', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof publiusABI, 'tokenURI', TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"totalSupply"`.
 */
export function usePubliusTotalSupply<
  TSelectData = ReadContractResult<typeof publiusABI, 'totalSupply'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof publiusABI, 'totalSupply', TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publiusABI}__.
 */
export function usePubliusWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof publiusABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof publiusABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof publiusABI, TFunctionName>({
    abi: publiusABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"addChapter"`.
 */
export function usePubliusAddChapter<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof publiusABI, 'addChapter'>['abi'],
        'addChapter'
      > & { functionName?: 'addChapter' }
    : UseContractWriteConfig<TMode, typeof publiusABI, 'addChapter'> & {
        abi?: never;
        functionName?: 'addChapter';
      } = {} as any
) {
  return useContractWrite<TMode, typeof publiusABI, 'addChapter'>({
    abi: publiusABI,
    functionName: 'addChapter',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"addPage"`.
 */
export function usePubliusAddPage<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof publiusABI, 'addPage'>['abi'],
        'addPage'
      > & { functionName?: 'addPage' }
    : UseContractWriteConfig<TMode, typeof publiusABI, 'addPage'> & {
        abi?: never;
        functionName?: 'addPage';
      } = {} as any
) {
  return useContractWrite<TMode, typeof publiusABI, 'addPage'>({
    abi: publiusABI,
    functionName: 'addPage',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"addSection"`.
 */
export function usePubliusAddSection<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof publiusABI, 'addSection'>['abi'],
        'addSection'
      > & { functionName?: 'addSection' }
    : UseContractWriteConfig<TMode, typeof publiusABI, 'addSection'> & {
        abi?: never;
        functionName?: 'addSection';
      } = {} as any
) {
  return useContractWrite<TMode, typeof publiusABI, 'addSection'>({
    abi: publiusABI,
    functionName: 'addSection',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"approve"`.
 */
export function usePubliusApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof publiusABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof publiusABI, 'approve'> & {
        abi?: never;
        functionName?: 'approve';
      } = {} as any
) {
  return useContractWrite<TMode, typeof publiusABI, 'approve'>({
    abi: publiusABI,
    functionName: 'approve',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"initialize"`.
 */
export function usePubliusInitialize<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof publiusABI, 'initialize'>['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<TMode, typeof publiusABI, 'initialize'> & {
        abi?: never;
        functionName?: 'initialize';
      } = {} as any
) {
  return useContractWrite<TMode, typeof publiusABI, 'initialize'>({
    abi: publiusABI,
    functionName: 'initialize',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"mint"`.
 */
export function usePubliusMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof publiusABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof publiusABI, 'mint'> & {
        abi?: never;
        functionName?: 'mint';
      } = {} as any
) {
  return useContractWrite<TMode, typeof publiusABI, 'mint'>({
    abi: publiusABI,
    functionName: 'mint',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"modifyChapter"`.
 */
export function usePubliusModifyChapter<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof publiusABI, 'modifyChapter'>['abi'],
        'modifyChapter'
      > & { functionName?: 'modifyChapter' }
    : UseContractWriteConfig<TMode, typeof publiusABI, 'modifyChapter'> & {
        abi?: never;
        functionName?: 'modifyChapter';
      } = {} as any
) {
  return useContractWrite<TMode, typeof publiusABI, 'modifyChapter'>({
    abi: publiusABI,
    functionName: 'modifyChapter',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"modifyPage"`.
 */
export function usePubliusModifyPage<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof publiusABI, 'modifyPage'>['abi'],
        'modifyPage'
      > & { functionName?: 'modifyPage' }
    : UseContractWriteConfig<TMode, typeof publiusABI, 'modifyPage'> & {
        abi?: never;
        functionName?: 'modifyPage';
      } = {} as any
) {
  return useContractWrite<TMode, typeof publiusABI, 'modifyPage'>({
    abi: publiusABI,
    functionName: 'modifyPage',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"modifySection"`.
 */
export function usePubliusModifySection<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof publiusABI, 'modifySection'>['abi'],
        'modifySection'
      > & { functionName?: 'modifySection' }
    : UseContractWriteConfig<TMode, typeof publiusABI, 'modifySection'> & {
        abi?: never;
        functionName?: 'modifySection';
      } = {} as any
) {
  return useContractWrite<TMode, typeof publiusABI, 'modifySection'>({
    abi: publiusABI,
    functionName: 'modifySection',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePubliusRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof publiusABI,
          'renounceOwnership'
        >['abi'],
        'renounceOwnership'
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<TMode, typeof publiusABI, 'renounceOwnership'> & {
        abi?: never;
        functionName?: 'renounceOwnership';
      } = {} as any
) {
  return useContractWrite<TMode, typeof publiusABI, 'renounceOwnership'>({
    abi: publiusABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePubliusSafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof publiusABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof publiusABI, 'safeTransferFrom'> & {
        abi?: never;
        functionName?: 'safeTransferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof publiusABI, 'safeTransferFrom'>({
    abi: publiusABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePubliusSetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof publiusABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof publiusABI, 'setApprovalForAll'> & {
        abi?: never;
        functionName?: 'setApprovalForAll';
      } = {} as any
) {
  return useContractWrite<TMode, typeof publiusABI, 'setApprovalForAll'>({
    abi: publiusABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePubliusTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof publiusABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof publiusABI, 'transferFrom'> & {
        abi?: never;
        functionName?: 'transferFrom';
      } = {} as any
) {
  return useContractWrite<TMode, typeof publiusABI, 'transferFrom'>({
    abi: publiusABI,
    functionName: 'transferFrom',
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePubliusTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof publiusABI,
          'transferOwnership'
        >['abi'],
        'transferOwnership'
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<TMode, typeof publiusABI, 'transferOwnership'> & {
        abi?: never;
        functionName?: 'transferOwnership';
      } = {} as any
) {
  return useContractWrite<TMode, typeof publiusABI, 'transferOwnership'>({
    abi: publiusABI,
    functionName: 'transferOwnership',
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publiusABI}__.
 */
export function usePreparePubliusWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof publiusABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: publiusABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof publiusABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"addChapter"`.
 */
export function usePreparePubliusAddChapter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof publiusABI, 'addChapter'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: publiusABI,
    functionName: 'addChapter',
    ...config,
  } as UsePrepareContractWriteConfig<typeof publiusABI, 'addChapter'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"addPage"`.
 */
export function usePreparePubliusAddPage(
  config: Omit<
    UsePrepareContractWriteConfig<typeof publiusABI, 'addPage'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: publiusABI,
    functionName: 'addPage',
    ...config,
  } as UsePrepareContractWriteConfig<typeof publiusABI, 'addPage'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"addSection"`.
 */
export function usePreparePubliusAddSection(
  config: Omit<
    UsePrepareContractWriteConfig<typeof publiusABI, 'addSection'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: publiusABI,
    functionName: 'addSection',
    ...config,
  } as UsePrepareContractWriteConfig<typeof publiusABI, 'addSection'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"approve"`.
 */
export function usePreparePubliusApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof publiusABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: publiusABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof publiusABI, 'approve'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"initialize"`.
 */
export function usePreparePubliusInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof publiusABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: publiusABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof publiusABI, 'initialize'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"mint"`.
 */
export function usePreparePubliusMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof publiusABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: publiusABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof publiusABI, 'mint'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"modifyChapter"`.
 */
export function usePreparePubliusModifyChapter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof publiusABI, 'modifyChapter'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: publiusABI,
    functionName: 'modifyChapter',
    ...config,
  } as UsePrepareContractWriteConfig<typeof publiusABI, 'modifyChapter'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"modifyPage"`.
 */
export function usePreparePubliusModifyPage(
  config: Omit<
    UsePrepareContractWriteConfig<typeof publiusABI, 'modifyPage'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: publiusABI,
    functionName: 'modifyPage',
    ...config,
  } as UsePrepareContractWriteConfig<typeof publiusABI, 'modifyPage'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"modifySection"`.
 */
export function usePreparePubliusModifySection(
  config: Omit<
    UsePrepareContractWriteConfig<typeof publiusABI, 'modifySection'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: publiusABI,
    functionName: 'modifySection',
    ...config,
  } as UsePrepareContractWriteConfig<typeof publiusABI, 'modifySection'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePreparePubliusRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof publiusABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: publiusABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof publiusABI, 'renounceOwnership'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePreparePubliusSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof publiusABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: publiusABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof publiusABI, 'safeTransferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePreparePubliusSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof publiusABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: publiusABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof publiusABI, 'setApprovalForAll'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePreparePubliusTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof publiusABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: publiusABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof publiusABI, 'transferFrom'>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publiusABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePreparePubliusTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof publiusABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: publiusABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof publiusABI, 'transferOwnership'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publiusABI}__.
 */
export function usePubliusEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof publiusABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: publiusABI,
    ...config,
  } as UseContractEventConfig<typeof publiusABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publiusABI}__ and `eventName` set to `"Approval"`.
 */
export function usePubliusApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof publiusABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: publiusABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof publiusABI, 'Approval'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publiusABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function usePubliusApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof publiusABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: publiusABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof publiusABI, 'ApprovalForAll'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publiusABI}__ and `eventName` set to `"Initialized"`.
 */
export function usePubliusInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof publiusABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: publiusABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof publiusABI, 'Initialized'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publiusABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function usePubliusOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof publiusABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: publiusABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof publiusABI, 'OwnershipTransferred'>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link publiusABI}__ and `eventName` set to `"Transfer"`.
 */
export function usePubliusTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof publiusABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: publiusABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof publiusABI, 'Transfer'>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link publiusFactoryABI}__.
 */
export function usePubliusFactory(
  config: Omit<UseContractConfig, 'abi'> = {} as any
) {
  return useContract({ abi: publiusFactoryABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusFactoryABI}__.
 */
export function usePubliusFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof publiusFactoryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusFactoryABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: publiusFactoryABI,
    ...config,
  } as UseContractReadConfig<
    typeof publiusFactoryABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusFactoryABI}__ and `functionName` set to `"getBeacon"`.
 */
export function usePubliusFactoryGetBeacon<
  TSelectData = ReadContractResult<typeof publiusFactoryABI, 'getBeacon'>
>(
  config: Omit<
    UseContractReadConfig<typeof publiusFactoryABI, 'getBeacon', TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusFactoryABI,
    functionName: 'getBeacon',
    ...config,
  } as UseContractReadConfig<
    typeof publiusFactoryABI,
    'getBeacon',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusFactoryABI}__ and `functionName` set to `"getImplementation"`.
 */
export function usePubliusFactoryGetImplementation<
  TSelectData = ReadContractResult<
    typeof publiusFactoryABI,
    'getImplementation'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof publiusFactoryABI,
      'getImplementation',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusFactoryABI,
    functionName: 'getImplementation',
    ...config,
  } as UseContractReadConfig<
    typeof publiusFactoryABI,
    'getImplementation',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link publiusFactoryABI}__ and `functionName` set to `"getPublicationAddress"`.
 */
export function usePubliusFactoryGetPublicationAddress<
  TSelectData = ReadContractResult<
    typeof publiusFactoryABI,
    'getPublicationAddress'
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof publiusFactoryABI,
      'getPublicationAddress',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: publiusFactoryABI,
    functionName: 'getPublicationAddress',
    ...config,
  } as UseContractReadConfig<
    typeof publiusFactoryABI,
    'getPublicationAddress',
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publiusFactoryABI}__.
 */
export function usePubliusFactoryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof publiusFactoryABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof publiusFactoryABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof publiusFactoryABI, TFunctionName>({
    abi: publiusFactoryABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link publiusFactoryABI}__ and `functionName` set to `"createPublication"`.
 */
export function usePubliusFactoryCreatePublication<
  TMode extends WriteContractMode
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof publiusFactoryABI,
          'createPublication'
        >['abi'],
        'createPublication'
      > & { functionName?: 'createPublication' }
    : UseContractWriteConfig<
        TMode,
        typeof publiusFactoryABI,
        'createPublication'
      > & {
        abi?: never;
        functionName?: 'createPublication';
      } = {} as any
) {
  return useContractWrite<TMode, typeof publiusFactoryABI, 'createPublication'>(
    {
      abi: publiusFactoryABI,
      functionName: 'createPublication',
      ...config,
    } as any
  );
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publiusFactoryABI}__.
 */
export function usePreparePubliusFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof publiusFactoryABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: publiusFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof publiusFactoryABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link publiusFactoryABI}__ and `functionName` set to `"createPublication"`.
 */
export function usePreparePubliusFactoryCreatePublication(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof publiusFactoryABI,
      'createPublication'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: publiusFactoryABI,
    functionName: 'createPublication',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof publiusFactoryABI,
    'createPublication'
  >);
}
